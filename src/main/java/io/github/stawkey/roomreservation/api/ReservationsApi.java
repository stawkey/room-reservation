/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package io.github.stawkey.roomreservation.api;

import io.github.stawkey.roomreservation.dto.ReservationDto;
import org.springframework.format.annotation.DateTimeFormat;
import io.github.stawkey.roomreservation.dto.Error;

import java.time.OffsetDateTime;

import io.github.stawkey.roomreservation.dto.Page;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;

import java.util.List;
import java.util.Optional;

import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen",
        date = "2025-05-30T20:04:03.976488063+02:00[Europe/Warsaw]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "reservations", description = "Endpoints related to creating, managing, and querying reservations")
public interface ReservationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /reservations/{id} : Cancel reservation
     * Cancel an existing reservation, releasing the booked room and time.
     *
     * @param id ID of the reservation (required)
     * @return Reservation cancelled successfully (status code 204)
     *         or Invalid input. (status code 400)
     *         or Requested resource was not found. (status code 404)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
            operationId = "cancelReservation",
            summary = "Cancel reservation",
            description = "Cancel an existing reservation, releasing the booked room and time.",
            tags = {"reservations"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Reservation cancelled successfully"),
                    @ApiResponse(responseCode = "400", description = "Invalid input.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Requested resource was not found.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/reservations/{id}",
            produces = {"application/json"}
    )

    default ResponseEntity<Void> cancelReservation(
            @Parameter(name = "id", description = "ID of the reservation", required = true, in = ParameterIn.PATH)
            @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reservations/{id} : Retrieve reservation details
     * Retrieve full details of a reservation by its ID.
     *
     * @param id ID of the reservation (required)
     * @return Reservation data retrieved successfully (status code 200)
     *         or Invalid input. (status code 400)
     *         or Requested resource was not found. (status code 404)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
            operationId = "getReservation",
            summary = "Retrieve reservation details",
            description = "Retrieve full details of a reservation by its ID.",
            tags = {"reservations"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Reservation data retrieved successfully",
                            content = {
                                    @Content(mediaType = "application/json",
                                            schema = @Schema(implementation = ReservationDto.class))
                            }),
                    @ApiResponse(responseCode = "400", description = "Invalid input.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Requested resource was not found.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/reservations/{id}",
            produces = {"application/json"}
    )

    default ResponseEntity<ReservationDto> getReservation(
            @Parameter(name = "id", description = "ID of the reservation", required = true, in = ParameterIn.PATH)
            @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString =
                            "{ \"createdAt\" : \"2025-05-24T12:34:56Z\", \"start\" : \"2000-01-23T04:56:07" +
                                    ".000+00:00\", \"description\" : \"description\", \"end\" : \"2000-01-23T04:56:07" +
                                    ".000+00:00\", \"id\" : 1234, \"roomId\" : 321, \"updatedAt\" : " +
                                    "\"2025-05-25T08:00:00Z\", \"status\" : \"active\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reservations : List reservations
     * Returns a paginated collection of reservations with optional filters for date range, room ID and sorting.
     *
     * @param start Filter reservations starting from this datetime (inclusive, ISO 8601 format) (optional)
     * @param end Filter reservations ending at this datetime (inclusive, ISO 8601 format) (optional)
     * @param roomId Filter reservations by one or multiple room IDs (optional)
     * @param sort Sort results by a specific field (e.g., &#x60;date&#x60;, &#x60;createdAt&#x60;, &#x60;
     *             roomName&#x60;) (optional)
     * @param order Sort direction; ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;) (optional, default
     *              to asc)
     * @param page Page number for pagination (starting from 1) (optional, default to 1)
     * @param pageSize Number of results per page (max 100) (optional, default to 20)
     * @return Paginated list of reservations (status code 200)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
            operationId = "listReservation",
            summary = "List reservations",
            description = "Returns a paginated collection of reservations with optional filters for date range, room " +
                    "ID and sorting.",
            tags = {"reservations"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Paginated list of reservations", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Page.class))
                    }),
                    @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/reservations",
            produces = {"application/json"}
    )

    default ResponseEntity<Page> listReservation(
            @Parameter(name = "start",
                    description = "Filter reservations starting from this datetime (inclusive, ISO 8601 format)",
                    in = ParameterIn.QUERY) @Valid @RequestParam(value = "start", required = false)
            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime start,
            @Parameter(name = "end",
                    description = "Filter reservations ending at this datetime (inclusive, ISO 8601 format)",
                    in = ParameterIn.QUERY) @Valid @RequestParam(value = "end", required = false)
            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime end,
            @Parameter(name = "room_id", description = "Filter reservations by one or multiple room IDs",
                    in = ParameterIn.QUERY) @Valid @RequestParam(value = "room_id", required = false)
            List<Long> roomId,
            @Parameter(name = "sort",
                    description = "Sort results by a specific field (e.g., `date`, `createdAt`, `roomName`)",
                    in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
            @Parameter(name = "order", description = "Sort direction; ascending (`asc`) or descending (`desc`)",
                    in = ParameterIn.QUERY) @Valid
            @RequestParam(value = "order", required = false, defaultValue = "asc") String order,
            @Min(1) @Parameter(name = "page", description = "Page number for pagination (starting from 1)",
                    in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1")
            Integer page,
            @Min(1) @Max(100)
            @Parameter(name = "page_size", description = "Number of results per page (max 100)", in = ParameterIn.QUERY)
            @Valid @RequestParam(value = "page_size", required = false, defaultValue = "20") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString =
                            "{ \"total\" : 120, \"totalPages\" : 6, \"pageSize\" : 20, \"page\" : 1, \"items\" : [ { " +
                                    "\"createdAt\" : \"2025-05-24T12:34:56Z\", \"start\" : \"2000-01-23T04:56:07" +
                                    ".000+00:00\", \"description\" : \"description\", \"end\" : \"2000-01-23T04:56:07" +
                                    ".000+00:00\", \"id\" : 1234, \"roomId\" : 321, \"updatedAt\" : " +
                                    "\"2025-05-25T08:00:00Z\", \"status\" : \"active\" }, { \"createdAt\" : " +
                                    "\"2025-05-24T12:34:56Z\", \"start\" : \"2000-01-23T04:56:07.000+00:00\", " +
                                    "\"description\" : \"description\", \"end\" : \"2000-01-23T04:56:07.000+00:00\", " +
                                    "\"id\" : 1234, \"roomId\" : 321, \"updatedAt\" : \"2025-05-25T08:00:00Z\", " +
                                    "\"status\" : \"active\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
