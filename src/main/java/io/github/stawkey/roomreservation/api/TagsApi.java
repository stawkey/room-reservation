/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.github.stawkey.roomreservation.api;

import io.github.stawkey.roomreservation.dto.CreateTagRequest;
import io.github.stawkey.roomreservation.dto.TagDto;
import io.github.stawkey.roomreservation.dto.UpdateTagRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-14T13:51:09.501262900+02:00[Europe/Warsaw]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "tags", description = "Endpoints for managing room feature tags")
public interface TagsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /tags : Create a new tag
     * Create a new tag.
     *
     * @param createTagRequest  (required)
     * @return Tag created successfully (status code 201)
     *         or Invalid input. (status code 400)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
        operationId = "createTag",
        summary = "Create a new tag",
        description = "Create a new tag.",
        tags = { "tags" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Tag created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tag.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tags",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TagDto> createTag(
        @Parameter(name = "CreateTagRequest", description = "", required = true) @Valid @RequestBody
        CreateTagRequest createTagRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 1, \"name\" : \"projector\", \"description\" : \"Room has a projector available\", \"createdAt\" : \"2025-05-24T12:34:56Z\", \"updatedAt\" : \"2025-05-24T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /tags/{tag_id} : Delete a tag
     * Delete a tag.
     *
     * @param tagId ID of the tag to delete (required)
     * @return Tag deleted successfully (status code 204)
     *         or Requested resource was not found. (status code 404)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
        operationId = "deleteTag",
        summary = "Delete a tag",
        description = "Delete a tag.",
        tags = { "tags" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Tag deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Requested resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tags/{tag_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteTag(
        @Parameter(name = "tag_id", description = "ID of the tag to delete", required = true, in = ParameterIn.PATH) @PathVariable("tag_id") Integer tagId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tags/{tag_id} : Get tag details
     * Retrieve details of a specific tag.
     *
     * @param tagId ID of the tag to retrieve (required)
     * @return Tag details (status code 200)
     *         or Requested resource was not found. (status code 404)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
        operationId = "getTag",
        summary = "Get tag details",
        description = "Retrieve details of a specific tag.",
        tags = { "tags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tag details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tag.class))
            }),
            @ApiResponse(responseCode = "404", description = "Requested resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tags/{tag_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TagDto> getTag(
        @Parameter(name = "tag_id", description = "ID of the tag to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("tag_id") Integer tagId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 1, \"name\" : \"projector\", \"description\" : \"Room has a projector available\", \"createdAt\" : \"2025-05-24T12:34:56Z\", \"updatedAt\" : \"2025-05-24T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tags : List all tags
     * Retrieve a list of all available tags.
     *
     * @return List of all tags (status code 200)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
        operationId = "listTags",
        summary = "List all tags",
        description = "Retrieve a list of all available tags.",
        tags = { "tags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of all tags", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Tag.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tags",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TagDto>> listTags(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : 1, \"name\" : \"projector\", \"description\" : \"Room has a projector available\", \"createdAt\" : \"2025-05-24T12:34:56Z\", \"updatedAt\" : \"2025-05-24T12:34:56Z\" }, { \"id\" : 1, \"name\" : \"projector\", \"description\" : \"Room has a projector available\", \"createdAt\" : \"2025-05-24T12:34:56Z\", \"updatedAt\" : \"2025-05-24T12:34:56Z\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /tags/{tag_id} : Update a tag
     * Update an existing tag.
     *
     * @param tagId ID of the tag to update (required)
     * @param updateTagRequest  (required)
     * @return Tag updated successfully (status code 200)
     *         or Invalid input. (status code 400)
     *         or Requested resource was not found. (status code 404)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
        operationId = "updateTag",
        summary = "Update a tag",
        description = "Update an existing tag.",
        tags = { "tags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tag updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tag.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Requested resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tags/{tag_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TagDto> updateTag(
        @Parameter(name = "tag_id", description = "ID of the tag to update", required = true, in = ParameterIn.PATH) @PathVariable("tag_id") Integer tagId,
        @Parameter(name = "UpdateTagRequest", description = "", required = true) @Valid @RequestBody
        UpdateTagRequest updateTagRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 1, \"name\" : \"projector\", \"description\" : \"Room has a projector available\", \"createdAt\" : \"2025-05-24T12:34:56Z\", \"updatedAt\" : \"2025-05-24T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
