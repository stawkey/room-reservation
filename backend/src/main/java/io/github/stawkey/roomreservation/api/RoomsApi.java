/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.github.stawkey.roomreservation.api;

import io.github.stawkey.roomreservation.dto.*;
import io.github.stawkey.roomreservation.dto.Error;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.format.annotation.DateTimeFormat;

import java.time.OffsetDateTime;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-30T20:04:03.976488063+02:00[Europe/Warsaw]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "rooms", description = "Endpoints for room management and retrieval")
public interface RoomsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /rooms : Create a new room
     * Creates a new room.
     *
     * @param createRoomRequest  (required)
     * @return Room created successfully (status code 201)
     *         or Invalid input. (status code 400)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
        operationId = "createRoom",
        summary = "Create a new room",
        description = "Creates a new room.",
        tags = { "rooms" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Room created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoomDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rooms",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RoomDto> createRoom(
        @Parameter(name = "CreateRoomRequest", description = "", required = true) @Valid @RequestBody CreateRoomRequest createRoomRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2025-05-24T12:34:56Z\", \"name\" : \"Conference Room A\", \"description\" : \"Room equipped with projector and whiteboard.\", \"id\" : 321, \"updatedAt\" : \"2025-05-25T08:00:00Z\", \"capacity\" : 20 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rooms/{room_id} : Delete room
     * Delete the room.
     *
     * @param roomId ID of the room to retrieve or modify (required)
     * @return Room deleted successfully (status code 204)
     *         or Invalid input. (status code 400)
     *         or Requested resource was not found. (status code 404)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
        operationId = "deleteRoom",
        summary = "Delete room",
        description = "Delete the room.",
        tags = { "rooms" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Room deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Requested resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rooms/{room_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteRoom(
        @Parameter(name = "room_id", description = "ID of the room to retrieve or modify", required = true, in =
                ParameterIn.PATH) @PathVariable("room_id") Long roomId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rooms/{room_id} : Get room details
     * Retrieve detailed information about a room.
     *
     * @param roomId ID of the room to retrieve or modify (required)
     * @return Room details (status code 200)
     *         or Invalid input. (status code 400)
     *         or Requested resource was not found. (status code 404)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
        operationId = "getRoom",
        summary = "Get room details",
        description = "Retrieve detailed information about a room.",
        tags = { "rooms" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Room details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoomDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Requested resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rooms/{room_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RoomDto> getRoom(
        @Parameter(name = "room_id", description = "ID of the room to retrieve or modify", required = true, in =
                ParameterIn.PATH) @PathVariable("room_id") Long roomId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2025-05-24T12:34:56Z\", \"name\" : \"Conference Room A\", \"description\" : \"Room equipped with projector and whiteboard.\", \"id\" : 321, \"updatedAt\" : \"2025-05-25T08:00:00Z\", \"capacity\" : 20 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rooms : List rooms
     * Retrieve a paginated list of available rooms.
     *
     * @param page Page number for pagination (starting from 1) (optional, default to 1)
     * @param pageSize Number of rooms per page (max 100) (optional, default to 20)
     * @return Paginated list of rooms (status code 200)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
        operationId = "listRooms",
        summary = "List rooms",
        description = "Retrieve a paginated list of available rooms.",
        tags = { "rooms" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Paginated list of rooms", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListRooms200Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rooms",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListRooms200Response> listRooms(
        @Min(1) @Parameter(name = "page", description = "Page number for pagination (starting from 1)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Min(1) @Max(100) @Parameter(name = "page_size", description = "Number of rooms per page (max 100)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "20") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 150, \"totalPages\" : 8, \"pageSize\" : 20, \"page\" : 1, \"items\" : [ { \"createdAt\" : \"2025-05-24T12:34:56Z\", \"name\" : \"Conference Room A\", \"description\" : \"Room equipped with projector and whiteboard.\", \"id\" : 321, \"updatedAt\" : \"2025-05-25T08:00:00Z\", \"capacity\" : 20 }, { \"createdAt\" : \"2025-05-24T12:34:56Z\", \"name\" : \"Conference Room A\", \"description\" : \"Room equipped with projector and whiteboard.\", \"id\" : 321, \"updatedAt\" : \"2025-05-25T08:00:00Z\", \"capacity\" : 20 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rooms/{room_id}/reservations : List reservations for a specific room
     * Returns a list of reservations for the specified room. Supports optional filtering by date range. 
     *
     * @param roomId ID of the room to reserve (required)
     * @param startDate Filter for reservations starting after this datetime (inclusive, ISO 8601). If not provided, defaults to one month before the current date.  (optional)
     * @param endDate Filter for reservations ending before this datetime (inclusive, ISO 8601). If not provided, defaults to one month after the current date.  (optional)
     * @param page Page number for pagination (starting from 1) (optional, default to 1)
     * @param pageSize Number of results per page (max 100) (optional, default to 20)
     * @return List of reservations for the room (status code 200)
     *         or Requested resource was not found. (status code 404)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
        operationId = "listRoomReservations",
        summary = "List reservations for a specific room",
        description = "Returns a list of reservations for the specified room. Supports optional filtering by date range. ",
        tags = { "reservations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of reservations for the room", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Page.class))
            }),
            @ApiResponse(responseCode = "404", description = "Requested resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rooms/{room_id}/reservations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Page> listRoomReservations(
        @Parameter(name = "room_id", description = "ID of the room to reserve", required = true, in =
                ParameterIn.PATH) @PathVariable("room_id") Long roomId,
        @Parameter(name = "startDate", description = "Filter for reservations starting after this datetime (inclusive, ISO 8601). If not provided, defaults to one month before the current date. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDate,
        @Parameter(name = "endDate", description = "Filter for reservations ending before this datetime (inclusive, ISO 8601). If not provided, defaults to one month after the current date. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDate,
        @Min(1) @Parameter(name = "page", description = "Page number for pagination (starting from 1)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Min(1) @Max(100) @Parameter(name = "page_size", description = "Number of results per page (max 100)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "20") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            // ...existing code...
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * POST /rooms/{room_id}/reservations : Create a reservation
     * Reserves the specified room for the requested time span.  Returns **409 Conflict** if the time range overlaps an existing reservation. 
     *
     * @param roomId ID of the room to reserve (required)
     * @param reservationDto  (required)
     * @return Reservation created successfully (status code 201)
     *         or Invalid input. (status code 400)
     *         or Requested resource was not found. (status code 404)
     *         or Reservation conflicts with an existing booking. (status code 409)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
        operationId = "createRoomReservation",
        summary = "Create a reservation",
        description = "Reserves the specified room for the requested time span.  Returns **409 Conflict** if the time range overlaps an existing reservation. ",
        tags = { "reservations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Reservation created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReservationDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Requested resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Reservation conflicts with an existing booking.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rooms/{room_id}/reservations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ReservationDto> createRoomReservation(
            @Parameter(name = "room_id", required = true, in = ParameterIn.PATH)
            @PathVariable("room_id") Long roomId,
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "Reservation data",
                    required = true,
                    content = @Content(
                            mediaType = "application/json",
                            examples = @ExampleObject(
                                    value = "{\n  \"start\": \"2025-06-15T11:05:32.700Z\",\n  \"end\": \"2025-06-15T14:07:32.700Z\",\n  \"status\": \"active\",\n  \"description\": \"rezerwacja\"\n}"
                            )
                    )
            )
            @Valid @RequestBody ReservationDto reservationDto
    ) {
        getRequest().ifPresent(request -> {
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * PUT /rooms/{room_id} : Update room
     * Updates information for a room.
     *
     * @param roomId ID of the room to retrieve or modify (required)
     * @param updateRoomRequest Room data to update (required)
     * @return Room updated successfully (status code 200)
     *         or Invalid input. (status code 400)
     *         or Requested resource was not found. (status code 404)
     *         or Unexpected server error. (status code 200)
     */
    @Operation(
        operationId = "updateRoom",
        summary = "Update room",
        description = "Updates information for a room.",
        tags = { "rooms" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Room updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoomDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Requested resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rooms/{room_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RoomDto> updateRoom(
        @Parameter(name = "room_id", description = "ID of the room to retrieve or modify", required = true, in =
                ParameterIn.PATH) @PathVariable("room_id") Long roomId,
        @Parameter(name = "UpdateRoomRequest", description = "Room data to update", required = true) @Valid @RequestBody UpdateRoomRequest updateRoomRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2025-05-24T12:34:56Z\", \"name\" : \"Conference Room A\", \"description\" : \"Room equipped with projector and whiteboard.\", \"id\" : 321, \"updatedAt\" : \"2025-05-25T08:00:00Z\", \"capacity\" : 20 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"BadRequest\", \"message\" : \"Invalid input provided.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

